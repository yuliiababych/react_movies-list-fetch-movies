{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","onAdd","_useState","useState","undefined","_useState2","_slicedToArray","setMovie","_useState3","_useState4","query","setQuery","_useState5","_useState6","errorMessage","setErrorMessage","_useState7","_useState8","loading","setLoading","findMovie","trimmedTitle","trim","fetch","concat","then","res","json","catch","Response","Error","getMovie","result","movieFromApi","Title","Plot","Poster","imdbID","_Fragment","htmlFor","type","id","placeholder","classNames","value","onChange","e","target","onClick","preventDefault","disabled","App","setMovies","some","mov","prev","_toConsumableArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd41bb4a.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport { MovieData } from '../../types/MovieData';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({ onAdd }) => {\n  const [movie, setMovie] = useState<Movie | undefined>(undefined);\n  const [query, setQuery] = useState<string>('');\n  const [errorMessage, setErrorMessage] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const normalizedMovie = (movieFromApi: MovieData): Movie => {\n    return {\n      title: movieFromApi.Title,\n      description: movieFromApi.Plot,\n      imgUrl: movieFromApi.Poster === 'N/A'\n        ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n        : movieFromApi.Poster,\n      imdbUrl: `https://www.imdb.com/title/${movieFromApi.imdbID}`,\n      imdbId: movieFromApi.imdbID,\n    };\n  };\n\n  const findMovie = (title: string) => {\n    const trimmedTitle = title.trim();\n\n    if (trimmedTitle === '') {\n      return;\n    }\n\n    setLoading(true);\n    setErrorMessage(false);\n\n    getMovie(trimmedTitle)\n      .then(result => {\n        if ('Error' in result) {\n          setLoading(false);\n          setErrorMessage(true);\n        } else {\n          setErrorMessage(false);\n          setLoading(false);\n\n          setMovie(normalizedMovie(result));\n        }\n      });\n  };\n\n  const handleFindAMovie = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    findMovie(query);\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setErrorMessage(false);\n    setQuery(e.target.value);\n  };\n\n  const handleOnAdd = () => {\n    if (movie) {\n      onAdd(movie);\n    }\n\n    setMovie(undefined);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', { 'is-danger': errorMessage })}\n              value={query}\n              onChange={handleInputChange}\n            />\n          </div>\n\n          {errorMessage && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              onClick={handleFindAMovie}\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              disabled={!(query.trim())}\n              className={classNames(\n                'button',\n                'is-light',\n                { 'is-loading': loading },\n              )}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => handleOnAdd()}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          {movie && <MovieCard movie={movie} />}\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=d0245fce';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const onAdd = (movie: Movie) => {\n    const repeatedMovie = movies.some(mov => movie.imdbId === mov.imdbId);\n\n    if (repeatedMovie) {\n      return;\n    }\n\n    setMovies(prev => [\n      ...prev,\n      movie,\n    ]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}